/*
  {
    "title": "",
    "guid": "",
    "date": "",
    "text": [
      "",
      ""
    ]
  },
*/


// blog content
var blogContent = [
    {
        "title": "CodeClan Week04/05",
        "guid": "3c859d5b",
        "date": "09/09/2018",
        "text": [
            "It’s taken me a lot longer to get this post done than I hoped. I’ve had friends visiting, birthdays and It’s been a busy couple of weeks at CodeClan. Week 4 and 5 were essentially tying things together then starting our first projects so it made sense to combine the two. I kept thinking I’d have time to write something but I was knackered at the end of most days and kept putting it off. It’s amazing how fast it’s all going and we’ve just finished week 6, which I’ll hopefully write about in the next couple of days. Anyway, week 4 and 5, UX, Sinatra, more on MVC and my first project! It was all great but the UX day was particularly interesting and I had a lot of fun with the project, it was fantastic to be able to take all the things I’ve learned, put them together and make something that works.",
            "Week 4 day 1 was User eXperience (UX) with <a href='https://twitter.com/wojtekkutyla' target='_blank'>@wojtekkutyla</a>. I didn’t really know what to expect from the day, I thought UX was just the user interface (UI), how the user interacts with the app, but there was a lot more too it and I got a lot out of the day with Wojtek. Proto-personas (a made up user to put yourself in their shoes), user needs (what the user actually needs from the application), user journeys (the steps a user will take to achieve a single goal in the app) and wireframing (a simple representation of what the site will look like). A lot of UX is about the frontend and I’m more interested in working in the backend but it still comes into play there as well. Everything from how fast the application runs to whether it actually does what the user needs are part of UX. The main takeaway from the day for me was, always think of the users who will use your application, they’re the ones you’re making it for.",
            "Day 2 and 3 were all around Sinatra, views and controllers. Sinatra is a light-weight Ruby web framework which supports the development of web applications. This ties back into views and controllers (part of MVC I mentioned in the previous post). You create controllers, which are just ruby files, and use the domain-specific language (DSL) provided by Sinatra to describe routes. Routes are code blocks that get called every time a request matches a given path. A view in this case is a template for the html file that will be sent to the browser. We wrote these using embedded ruby (erb) and html. This allows for dynamic content to be generated. I’ll go through this below using the project as an example.",
            "So onto the the project! Week 4 day 4 was the big day, we got a choice of briefs and then we were pretty much left to our own devices for the next 7 days (of course the instructors were on hand if we needed any help). We had 4 choices; spending tracker, shop inventory, gym or gallery. I chose the shop inventory brief - “You have been approached by a shopkeeper who requires an app which allows them to keep track of their shops inventory.” - and you can see the <a href='http://s2.nimbus117.co.uk' target='_blank'>end result here</a> (you can see all the code <a href='https://github.com/nimbus117/shop_inventory' target='_blank'>on github</a>).",
            "<img class='img-thumbnail' src='images/cc-project-site.png' alt=''>",
            "I absolutely loved working on the project and the whole time I felt like writing code is what I’m made for. There were some difficult points and I did get frustrated but not with the coding. I misheard the initial brief and thought I was making a shop, not a shop inventory. When it dawned on me I was a bit disappointed. I had a crazy idea for a wizard shop (it sold dragons, magic potions and the like) and had a whole bunch of images from <a href='https://opengameart.org' target='_blank'>OpenGameArt</a> I wanted to use and was gutted I couldn’t. The great thing though, was once I started thinking about the inventory requirements I realised I was making a tool people could actually use and that’s the whole reason I’m getting into development so I was happy again. I struggled with how and where things should be done. Should I return whole rows and tables from sql then manipulate the data in ruby or should my sql queries be as specific as possible? I went with the latter and tried to only return data I was going to use and also reduce the total number of queries needed when rendering a page. The biggest difficulty for me was not having an actual client to ask what they needed from the application. I had some ideas and came up with what I thought would be useful but having someone to discuss requirements with would have been really helpful. It made me realise it’s really important to know what a user actually wants from an app.",
            "The below images show an example of the MVC pattern from my project. <a href='http://s2.nimbus117.co.uk/inventory/new' target='_blank'>See the page here</a>.",
            "<img class='img-thumbnail' src='images/cc-project-code.png' alt=''>",
            "So that’s 5 weeks out of 16 done at CodeClan and the end of Ruby, for now. Next up is JavaScript!"
        ]
    },
    {
        "title": "CodeClan Week03",
        "guid": "f1521dfa",
        "date": "20/08/2018",
        "text": [
            "Three weeks done and it's all just a blur, a brilliant blur! I’m learning loads, it’s amazing how much, but time is just rushing by and looking back it's hard to separate out the days. Last week was all about databases, using them, combining that with what we’ve already learned in ruby and a couple other new concepts to grasp.",
            "The first new concept was MVC (Model, View, Controller). MVC is a commonly used pattern in software design that splits the application into 3 parts:",
            "<ul><li>Models - The actual functionality of the app</li><li>Views - The user interface (the parts the user interacts with)</li><li>Controllers - The part that binds the models and views together</li></ul>",
            "We’ve only really covered models in detail (classes and functions). Views in this case will be HTML and CSS, which we briefly covered in the pre-course work, but we haven't looked at tying views in with models yet. Controllers will be coming in week four and I can’t wait to see the whole thing put together. So with MVC mostly covered we went onto the bit behind pretty much every website and application, databases.",
            "Databases are simply for storing data. To do anything useful though you need to be able to manipulate that data in some way. Enter Structured Query Language (SQL). SQL is a language you can use to query a database. With my background in ops I had worked with SQL servers a lot but, other than the odd query given to me by a DBA to run, I’d never worked with the data in a database. Data is stored in tables and there can be many tables in a database. A table is like a spreadsheet, they have a name that describes the type of thing that you’re storing (say pizza), they have columns that represent something about the thing (toppings, size, calories) and they have rows which are the actual data you want stored (pepperoni, large, too many). There’s essentially 4 things you can do with data in a database and that leads to a fantastic acronym, CRUD!",
            "<ul><li>Create - Put data in</li><li>Read - Get data out</li><li>Update - Change the data</li><li>Delete - Remove the data</li></ul>",
            "A lot of the week involved creating databases/tables and then using CRUD operations to interact with the data in some way. Tying this in with ruby was a lot of fun and I really began to see things coming together in terms of building an actual working application. It didn’t stop there though! One of the really neat things about databases is the associations you can make between the data in different tables. These come in 3 types; one-to-one associations, one-to-many and many-to-many. Going back to the pizza example you could use these to associate a pizza table with an ingredients table, pizzas with orders and orders with customers and so on. It did get a little confusing at this point, joining multiple tables together then realising I’d massively over complicated things, but that’s half the fun and getting to try things out is the best way to learn anyway.",
            "The last new thing we covered was class methods. Up to this point we were creating objects of a given type and using instance methods (customer.buy_pizza) but what if you want to get a list of all the pizzas? It doesn’t make sense to create an instance of the pizza class to then get a list of pizzas. I thought this was a pretty cool thing when we were first shown. Why not call a method directly from the Pizza class (Pizza.get_all). Boom!",
            "There’s still loads to go and I can’t wait to see more of the pieces come together but I have to keep reminding myself how much I’ve already learned and how, with a few simple components some pretty complex capabilities can emerge.",
            "The highlights from week 3 we’re definitely the weekend homework, where we got to put everything we’d learnt together and also the realisation I could actually start making simple, useful applications. We’ve been playing a few games of Potato Pirates each week and it dawned on me I could create a database and write a little ruby code to create a command line application for tracking who wins each game. I’ve got to admit I was pretty proud of it and it actually has a real world use.",
            "<img class='img-thumbnail' src='images/cc-potato-pirates-app.png' alt='Terminal showing the potato pirates leaderboard and some of the code'>"
        ]
    },
    {
        "title": "CodeClan Week02",
        "guid": "2235e867",
        "date": "12/08/2018",
        "text": [
            "Classes, inheritance, enumeration, Snowmen and Potato Pirates. Another week done and some great stuff covered. It keeps amazing me how much we cover in such a short time and thankfully I seem to be retaining most of it.",
            "<img class='img-thumbnail' src='images/cc-week2-potato-pirates.png' alt='E24 playing potato pirates'>",
            "I finally got to play Potato Pirates!!! Yep, you read that right, let me explain. It’s a game about programming fundamentals and it involves potatoes, that are also pirates... I backed it on kickstarter last year, my girlfriend at the time was thinking about becoming a developer and I thought it would be a great gift, unfortunately I never got a chance to give it to her. Weirdly finding enough friends who wanted to play a game about programming proved difficult so it sat in a corner largely forgotten about since January. One of the things I love about CodeClan is I’m surrounded by like minded people and it was easy to find some folk to give it a bash. Long story short it was great fun and surprisingly good at getting programming basics across. If you’re at all interested in becoming a developer or know someone who is, <a href='https://www.potatopirates.game/' target='_blank'>buy it!</a>",
            "Right, back to the actual course. The bulk of this week was around creating and using our own classes. Classes are like blueprints and you can create instances of them that represent objects. These objects have data associated with them (properties) and behaviours they can perform (methods). I’d been looking forward to this a lot. My experience in PowerShell scripting and the little bit of programming learning I’d done online involved using built in classes and writing functions to get what I wanted done. This had given me an intro to object-oriented programming but it was limiting and tended to get quite messy. I’d used classes and knew they were important but had no idea how to create my own. In my head they were some kind of mystical thing that required knowledge of the “Deeper Magic”. In reality, it was far more simple to design my own classes than I thought. Rather than an array, hash, csv, etc holding data you define properties and parameters that are required when instantiating your class. Instead of random functions floating around you define methods in the class that act on that data. Simple, then came multiple classes working together.",
            "That led to many more questions. How many classes do I need to create for a given project, what responsibility should each class have? If you have a customer and a shop class, do you define a buy method on the customer or a sell method on the shop?? Or both??? Hopefully that kind of thing will come with experience but for now it’s slightly maddening thinking of all the possibilities and permutations! However that has led me to really appreciate part of learning to be a developer I hadn’t considered. Planning and diagrams! This has quite quickly become my new favourite thing. To me it’s essentially the part where you solve the problem and the coding is just telling the computer how to implement your plan. The first classes I designed changed the whole time I was working with them and it was confusing as hell to keep track of what was doing what. But now I put most of my time into the diagrams and it’s made things so much simpler when it comes to actually writing the code, hopefully that continues.",
            "Other than classes we looked deeper into enumeration in ruby using the Enumerable mixin. This has been great to simplify and reduce code, no more for loops everywhere! We also touched on using pry for debugging but until I actually debug something with it I don’t know what to think.",
            "The highlight of this week was definitely the snowman/pub lab. Me and my partner worked through the pub brief and it really helped to solidify what we’d learned up till then, it was also a lot of fun. I enjoyed it so much in fact I ended up doing the snowman brief that night myself. Again planning it all out made such a difference and when it came to writing the classes it was all pretty straight forward. Up to this point everything we’d done was just to pass tests but the snowman was different, this was a game you could actually play! At this point I got a little carried away and added in user prompts, obfuscated input and ascii art! It was great to have something that actually worked and I could show people! Check out the game <a href='https://github.com/nimbus117/snowman' target='_blank'>here!</a>"
        ]
    },
    {
        "title": "CodeClan Week01",
        "guid": "df469a35",
        "date": "05/08/2018",
        "text": [
            "One week down, 15 to go! So far it's been everything I'd hoped for and more. Getting to know my cohort and the wide range of backgrounds and experience the people have has been really eye opening. Some of us have a little coding experience already and some don’t but everyone’s been really open to help and encourage each other and the instructors are just brilliant. The way they teach and the way the course has been structured is so logical and builds on itself. I don’t think I’ve ever learned so much in one week and it’s just going to get more and more in depth as we go. So far I’ve been lucky and nothings really pushed me but there are definitely going to be hard days to come and honestly I can’t wait for the challenge.",
            "Besides the obvious, learning about programing basics, we've also looked at soft skills, learning how to learn, pair programming and test driven development.",
            "<img class='img-thumbnail' src='images/cc-week1-tdd.png' alt='ruby code and tests in atom'>",
            "I'd heard the words test driven development (TDD) before but, like a lot of things, had no idea what it actually involved. The basics are as the name implies, you write tests before your actual code and these tests drive the development. To be honest, at first it annoyed the hell out of me. I couldn’t see the benefit and it seemed to be unnecessary but, wow, was I wrong. After only a short while something clicked and it all became clear. The fail, pass, refactor cycle forces you to think about what you want to do before you start coding anything and keeps things working as you go along. It’s early days yet but once again I’ve seen the value in something I never would have considered without having it demonstrated to me. It’s also really satisfying getting all the tests passing and a good motivator when they fail!",
            "Another great thing I got to experience for the first time was pair programming. Put simply you program in pairs, working together and bouncing ideas of each other. A nice analogy is rally driving, one person typing (driving) and one watching for errors/typos, checking documentation and googling (navigating). Again it’s early days so I’m sure there's more to it but the basics we’ve got down add so much more value than I would have expected. I thought it would have been a slower approach than individual programming but in reality we got things done very quickly and with far less mistakes. If I didn’t know something my partner usually did and when I new something they didn’t it actually helped me understand it more when explaining it to them.",
            "My favourite part so far was going over the weekend homework with a classmate. We’d both finished the work, including the optional extensions and had all the tests passing. I pointed out what I thought was a mistake in their code and we were trying to figure out why the tests were still passing. It turned out the code I had written was actually wrong and the tests we had been given weren't checking the result properly. I fixed my code and we wrote an extra test to confirm everything was now working as it should. It was a brilliant example of the benefits of working together, why good tests are so important and a reminder that just because your code passes the tests it doesn’t mean it's working properly. It was also a nice reminder to never be too sure you're right and someone else made a mistake!",
            "I’ve taken in an awful lot in a short time but I think the most important lesson I’ve learned is being more open minded and holding off on forming an opinion before I’ve really explored something. The people at CodeClan know what they’re doing and all I need to do is trust the process :-)"
        ]
    },
    {
        "title": "An End and a Beginning",
        "guid": "b6e49155",
        "date": "29/07/2018",
        "text": [
            "Oh my god I'm starting at CodeClan tomorrow!! It's been an emotional few weeks, I met my CodeClan cohort and said goodbye to my colleagues of the last 4 years. I'll miss them and learnt a lot from my time working along side some good people but, at the end of the day, I wasn't happy at work and since leaving I've felt happier and more excited than I have done in a long time. I thought I might have doubts or worry I'd made the wrong decision but so far everything has made me more and more sure I'm doing the right thing for me.",
            "The last 2 weeks I've been meeting up with a handful of the students on the course to go through the pre-course work together. It's been great spending time with people who are motivated to do something new and who share similar interests. For the most part we've been working through Codecademy courses on html/CSS and Ruby. I'm still not sure about Ruby, I like how readable it is but I've been getting frustrated with how many ways there are of doing the same thing. Maybe it's just me but I struggle when presented with too much choice. If I need to do something I like to know the best (or at least a good) way of doing it, with Ruby there are usually multiple possibilities with no clear way to decide which one to use. I guess this is down to my lack of experience and things will hopefully become more obvious with more practice.",
            "One of the things that has surprised me while doing the pre-course work (and while working through FreeCodeCamp) was how much I enjoyed and how interesting I found html and CSS to be. I assumed I'd just get through the basics and move on to the more <em>interesting</em> Ruby/JavaScript tutorials but I was wrong. It's very satisfying to structure a page and style it (very simply at this point). It's something I'm really looking forward to about the course, the opportunity to be exposed to things I wouldn't necessarily chose to do myself and hopefully there will be more and more pleasant surprises as I find out what parts of programming/development I enjoy and what I'll chose to do in the end.",
            "Up to this point it's been pretty simple. Lots of basic coding practice and getting used to the Mac. I can't wait to start on more in depth concepts and hopefully begin to build actual programs/applications that do something useful. I'm sure it'll be difficult and there will be times I just don't get something but that's all part of learning anything. Oddly I'm really looking forward to the problems, errors and bugs. Fixing something is a great way to lean how it works and so far this has been the only real bug I've had to deal with. How the hell did it get under the screen?!<video width='320' height='240' controls muted style='display: block; margin: auto;'><source src='/videos/bug.mp4' type='video/mp4'>Your browser does not support the video tag.</video>",
            "With the bus timetable checked, lunch prepared and this post written, it's time for an episode of Killjoys before an early night, ready for the beginning of the next phase in my life. Good night!"
        ]
    },
    {
        "title": "Focus and Distractions",
        "guid": "7e932448",
        "date": "21/06/2018",
        "text": [
            "The last week or two I've had a bit of a problem with focus. I'd moved away from FreeCodeCamp and started working through The Odin Project. Shortly after FCC released a huge update to their site and courses and I was torn about what to do next. It's odd that such a simple thing threw me and I kind of lost momentum. So after a bit of flapping and being distracted by numerous other things (discussed below) I decided on a plan of action. I'm going to finish the TOP section I'm on (it covers some of the same online course as the CodeClan pre-course work) and then go back to FCC.",
            "So onto the distractions! These are by no means a bad thing and I'm glad I've been doing them but it has taken time away from coding. The first was/is learning to touch type. It's something I've wanted to do for many, many years but never seemed to get round to it. Seeing as im going to be typing an awful lot over the next 6 months (and beyond) I thought now was a good time to start. Enter <a href='https://www.typingclub.com' target='_blank'>typingclub.com!</a> I've only been using it for a few weeks now but so far it's been absolutely brilliant! The lessons are well structured, slowly adding more keys mixed in with lots of practice and little games. The statistics are also really great. You can see details about your current typing speed and accuracy, how long you've practised for and even stats on each individual finger and key. What I really like about the stats is the fact you can see your progress so clearly. It's really good motivation to see a graph of your typing speed going up!",
            "<img class='img-thumbnail' src='images/blog-typingclub1.png' alt='graph showing typingclub.com progress overview'>",
            "The other distraction was dotfiles. Dotfiles are plain text configuration files on *nix systems used for things like the shell (.zshrc) and text editors (.vimrc). One of my favourite things is being able to customise the system I'm working on, colours, backgrounds, shortcuts, etc. I've had a lot of fun tinkering, particularly with Vim and GNU Screen.",
            "<img class='img-thumbnail' src='images/blog-dotfiles1.png' alt='screenshot showing the terminal, gnu screen and vim'>",
            "You can find the dotfiles used in the above screenshot<a href='https://github.com/nimbus117/dotfiles' target='_blank'> here </a>. Vim is incredibly customisable and has a full scripting language (VimScript) you can use to pretty much get vim to do whatever you want and, for the most part, it's pretty straight forward. Screen on the other hand was a little more complicated to configure. The below line from my .screenrc for example, configures the bottom status line (hardstatus) and looks more like hieroglyphics to me than code. It was however, quite satisfying to make sense of it all.",
            "<code>hardstatus string '%{bk} %1`@%H %{Gk} %D %d %{kG}%=%-Lw%{+b bk} %n*%f %t %{-}%+Lw%=%{Gk} %M %Y %{Bk} %0c '</code>",
            "I started this saying they were distractions but in reality I've learned a lot about using Unix like systems, setup my development environment and gained lots of experience in using vim, screen, git and bash.",
            "On top of everything I also handed in my notice so things are getting a little hectic at work. Only 3 weeks to go till my last day and then only two more till I start at CodeClan. I can't wait!!"
        ]
    },
    {
        "title": "Learning to Walk",
        "guid": "d324bae1",
        "date": "27/05/2018",
        "text": [
            "&quot;This could be your profession if you like solving logical problems, building useful things, and experimenting with new technologies. Web developers are in high demand, generally have a good work/life balance, and command comfortable salaries&quot;",
            "I've spent most of my first 30 days of #100DaysOfCode working through <a href='https://www.freecodecamp.org' target='_blank'>freeCodeCamp</a>. It's been fun and I've learned a lot but I'm getting a bit frustrated with the pace and feel I need a more solid understanding of the basics before moving on. I had a look around for other courses and guides and decided on the <a href='https://www.theodinproject.com' target='_blank'>The Odin Project</a> (TOP). The paragraph above is from one of the intro pages and it really appealed to me.",
            "TOP is open source and completely free! It's a mix of their own content and links to many other free resources and courses. There's also a lot of cross over with the CodeClan pre-course work which I'm hoping will help prepare me. I've only done the first few sections of the Web Development 101 course but there's two things I've really liked about it so far. First, there's such a mix of different material from different sources to read, videos to watch, online courses to do, guides to follow and most importantly it seems to be in a logical order that builds on itself. Secondly, you do a lot of the work on your actual computer. I liked the freeCodeCamp online interface, CodePen is very cool and the Codecademy courses are great but actually setting up your own computer with all the tools needed and doing it yourself is a lot more satisfying than doing it in the browser.",
            "About a week ago I decided to move away from coding on Windows and installed Ubuntu. I've nothing against windows, in fact I'm a big fan and have predominantly worked with it over my IT career. But, even at this early stage, it was pretty evident that I was better off learning on a *nix platform. I think it was the TOP installing Ruby guide that highlighted just how difficult getting some things running on Windows could be. I'll also be getting a Mac for the CodeClan course so thought it'd be good practice for then.",
            "I've used *nix systems a bit in the past. My old job gave us all MacBooks and we looked after a mix of Windows and Linux servers in AWS. That was a good few years ago and except for the odd bit here and there I've not heavily used Linux for a while. So I installed the latest Ubuntu desktop version on my laptop (dual boot with Windows 10) and spun up an Ubuntu server virtual machine in my home lab (the Sysadmin in me couldn't resist). It's been a fun week of learning and a lot has come back to me from years ago.",
            "<img class='img-thumbnail' src='images/blog-htmldog-beginner.png' alt='Screenshot showing a simple web page and the code used to create it'>",
            "As a way to force myself to do everything using the command line I decided to do all my coding on the Ubuntu server VM. From my laptop I can SSH onto the server, use screen to manage multiple windows and vim as a text editor (vimtutor is a great intro). With the help of this little python command '<code>sudo python3 -m http.server 80</code>' I can run a web server in the current directory and view the page back on my laptop."
        ]
    },
    {
        "title": "First Steps",
        "guid": "3627db73",
        "date": "18/05/2018",
        "text": [
            "Hello, welcome and thanks for visiting my site. This is the beginning of a new chapter in my life and I’m excited to see where it'll take me. I've not been in a great place the last couple of years, unfulfilling work, putting other people first and generally feeling that I’m missing something. So it's time to change things.",
            "For 7 years I've worked in operations, from Support to Sysadmin with a sprinkling of DevOps. I’ve enjoyed it thoroughly and learned a lot from some very good people. There is one problem though, most of the time my job is just following instructions and I rarely get a chance to be creative. Luckily, there's one part where I can be and that's scripting! Bash, Python and PowerShell became my way to be creative at work and I always found working with them fun.",
            "I’ve spent quite a lot of my free time over the last few years learning PowerShell and used it whenever possible. Automating tasks like VM creation and configuration, creating tools to manage updates or view event logs and generally writing functions and scripts at any opportunity (I even wrote a PS module to control Kodi on my TV). This, combined with the fact I’ve always worked closely with developers, got me thinking… Am I in the wrong job?",
            "The thought kept coming back but I wasn’t sure how I could make a change. About a year ago I first heard of <a href='https://codeclan.com' target='_blank'>CodeClan</a>. I checked out the site, read about their 16 week course and thought perfect! Then I saw the cost, which would more than double when paying bills for 16 weeks without working, and knew I’d have to be very sure before committing. Time passed and I kept hearing and reading good things about the course and graduates (it turned out my company had hired quite a few). Then a couple months ago I went to one of the weekend intro sessions and it was fantastic! The instructors we’re all keen and excited about what they did and being around other people who wanted to learn was such a great environment to be in. The course was exactly what I was looking for, a way to get where I wanted to be.",
            "Still on a high from the weekend session I sent in my application. A few days later I got an email asking me to come in for an interview. I booked a slot for the next week and waited (mostly patiently) trying not to think about what I’d do if I didn’t get a place. I was pretty nervous during the interview, but Steph was brilliant and we had a good chat making sure the course was the right fit for me. There was a basic code test which was very similar to scripting languages I’d used before and I started to feel confident it was all coming together. I had some questions around payment options and employment prospects after the course and then that was that. The next day I got offered a place in cohort 24!!!",
            "Now that I’ve accepted the place, having to wait two months for the start date is proving pretty tough. Nerves and excitement are keeping me going but I’m also trying to make good use of the time. I committed to #100DaysOfCode and started working through the <a href='https://www.freecodecamp.org' target='_blank'>freeCodeCamp</a> challenges. They’ve been good fun (and challenging) but I’m beginning to feel I need some other material to broaden my basic understanding, there’s lots of free courses for me to check out. Creating and tinkering with this site has also been a great learning experience and hopefully I’ll fill it with some amazing things over the next 6 months."
        ]
    }
];
